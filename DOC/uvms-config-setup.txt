The configuration sync handshake, and application runtime interaction, is bundled 
in an external JAR, called uvms-config. A few steps are needed to integrate it 
with your module.

When the module is deployed, it will pull its parameters (settings) from the
Config modlue. If the module is unknown to the Config module, a push request
is returned, whereupon the module will push its current paramaters to Config.

If the Config module deploys last, in announces itself using the ConfigStatus
topic, and the handshake as describes above follows.


Changes are only necessary in the module (APP) project.


1. Add the artifact a dependency

  Add the uvms-config artifact as a dependency to the message component of the 
  module. The version should be defined as a parameter in the root POM.

    groupId: eu.europa.ec.fisheries
    artifactId: uvms-config
    version: 1.0.0

   
2. Implement message interfaces
  
  Implement the ConfigMessageConsumer and ConfigMessageProducer interfaces.

  Preferably, the existing consumer/producer beans should be re-used.

  The new methods basically call the common producer/consumer methods, and wrap 
  any exception in a ConfigMessageException.

  The config queue can be mapped as a @Resource in the producer bean.

  Tip #1:
    Use the queue enum to differentiate the new queue.

  Tip #2:
    Do not forget to annotate the new methods with @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)

  Tip #3:
    If the Config module is not deployed, the deployment of other modules will
    fail after JMS queue timeout, because a null response cannot be handled.

    In the Consumer bean getMessage method, check the repsponse, and if null, 
    throw an exception with message "[ Timeout reached or message null in RulesResponseConsumerBean. ]".

    Also, reduce the timeout to 10 seconds so that deploying does not take forever
    when Config module is missing.


3. Implement ConfigHelper

  It should provide the module name and a list of strings of all parameter keys relevant to the module.

  Tip #4:
    Create this bean in the service project's *.bean package.

  Tip #5:
    Use MessageConstants to define the module name, as recognized by the Config module.


4. Remove duplicate code stuff

  Remove the Parameter entity, as well as the ParameterService interface and bean.
  Switch to the ParameterService included in uvms-config where needed.


5. Setup the context and database
  
  In persistence.xml, make sure that the name of the persistence unit is "modulePU",
  and that the Parameter entity is specified in a <class>-tag.

    <class>eu.europa.ec.fisheries.uvms.config.service.entity.Parameter</class>

  Your module's datasource schema must have a table called parameter, with 
  parameter ID ("key"), value and description columns.



--

Date: 2015-10-20
Author: marcus.hedenstrom@havochvatten.se
